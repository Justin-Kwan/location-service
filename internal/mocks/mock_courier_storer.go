// Code generated by MockGen. DO NOT EDIT.
// Source: location-service/internal/tracking (interfaces: CourierStorer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	internal "location-service/internal"
	reflect "reflect"
)

// MockCourierStorer is a mock of CourierStorer interface
type MockCourierStorer struct {
	ctrl     *gomock.Controller
	recorder *MockCourierStorerMockRecorder
}

// MockCourierStorerMockRecorder is the mock recorder for MockCourierStorer
type MockCourierStorerMockRecorder struct {
	mock *MockCourierStorer
}

// NewMockCourierStorer creates a new mock instance
func NewMockCourierStorer(ctrl *gomock.Controller) *MockCourierStorer {
	mock := &MockCourierStorer{ctrl: ctrl}
	mock.recorder = &MockCourierStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCourierStorer) EXPECT() *MockCourierStorerMockRecorder {
	return m.recorder
}

// DeleteCourier mocks base method
func (m *MockCourierStorer) DeleteCourier(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourier indicates an expected call of DeleteCourier
func (mr *MockCourierStorerMockRecorder) DeleteCourier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourier", reflect.TypeOf((*MockCourierStorer)(nil).DeleteCourier), arg0)
}

// FindAllNearbyCourierIDs mocks base method
func (m *MockCourierStorer) FindAllNearbyCourierIDs(arg0 *internal.TrackedItem, arg1 float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNearbyCourierIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNearbyCourierIDs indicates an expected call of FindAllNearbyCourierIDs
func (mr *MockCourierStorerMockRecorder) FindAllNearbyCourierIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNearbyCourierIDs", reflect.TypeOf((*MockCourierStorer)(nil).FindAllNearbyCourierIDs), arg0, arg1)
}

// GetCourier mocks base method
func (m *MockCourierStorer) GetCourier(arg0 string) (*internal.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourier", arg0)
	ret0, _ := ret[0].(*internal.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourier indicates an expected call of GetCourier
func (mr *MockCourierStorerMockRecorder) GetCourier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourier", reflect.TypeOf((*MockCourierStorer)(nil).GetCourier), arg0)
}

// UpsertCourier mocks base method
func (m *MockCourierStorer) UpsertCourier(arg0 *internal.Courier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCourier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCourier indicates an expected call of UpsertCourier
func (mr *MockCourierStorerMockRecorder) UpsertCourier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCourier", reflect.TypeOf((*MockCourierStorer)(nil).UpsertCourier), arg0)
}
