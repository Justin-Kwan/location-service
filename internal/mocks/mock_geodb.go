// Code generated by MockGen. DO NOT EDIT.
// Source: location-service/internal/storage/wrapper (interfaces: GeoDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	redis "location-service/internal/storage/redis"
	reflect "reflect"
)

// MockGeoDB is a mock of GeoDB interface
type MockGeoDB struct {
	ctrl     *gomock.Controller
	recorder *MockGeoDBMockRecorder
}

// MockGeoDBMockRecorder is the mock recorder for MockGeoDB
type MockGeoDBMockRecorder struct {
	mock *MockGeoDB
}

// NewMockGeoDB creates a new mock instance
func NewMockGeoDB(ctrl *gomock.Controller) *MockGeoDB {
	mock := &MockGeoDB{ctrl: ctrl}
	mock.recorder = &MockGeoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGeoDB) EXPECT() *MockGeoDBMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method
func (m *MockGeoDB) BatchDelete(arg0 ...*redis.GeoQuery) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete
func (mr *MockGeoDBMockRecorder) BatchDelete(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockGeoDB)(nil).BatchDelete), arg0...)
}

// BatchGetAllInRadius mocks base method
func (m *MockGeoDB) BatchGetAllInRadius(arg0 ...*redis.GeoQuery) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetAllInRadius", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetAllInRadius indicates an expected call of BatchGetAllInRadius
func (mr *MockGeoDBMockRecorder) BatchGetAllInRadius(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAllInRadius", reflect.TypeOf((*MockGeoDB)(nil).BatchGetAllInRadius), arg0...)
}

// BatchSetIfExists mocks base method
func (m *MockGeoDB) BatchSetIfExists(arg0 ...*redis.GeoQuery) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSetIfExists", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSetIfExists indicates an expected call of BatchSetIfExists
func (mr *MockGeoDBMockRecorder) BatchSetIfExists(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSetIfExists", reflect.TypeOf((*MockGeoDB)(nil).BatchSetIfExists), arg0...)
}

// Clear mocks base method
func (m *MockGeoDB) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockGeoDBMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockGeoDB)(nil).Clear))
}

// Delete mocks base method
func (m *MockGeoDB) Delete(arg0 *redis.GeoQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGeoDBMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGeoDB)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockGeoDB) Get(arg0 *redis.GeoQuery) (*redis.GeoPos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*redis.GeoPos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGeoDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGeoDB)(nil).Get), arg0)
}

// GetAllInRadius mocks base method
func (m *MockGeoDB) GetAllInRadius(arg0 *redis.GeoQuery) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInRadius", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInRadius indicates an expected call of GetAllInRadius
func (mr *MockGeoDBMockRecorder) GetAllInRadius(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInRadius", reflect.TypeOf((*MockGeoDB)(nil).GetAllInRadius), arg0)
}

// MoveMember mocks base method
func (m *MockGeoDB) MoveMember(arg0 *redis.GeoQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveMember indicates an expected call of MoveMember
func (mr *MockGeoDBMockRecorder) MoveMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveMember", reflect.TypeOf((*MockGeoDB)(nil).MoveMember), arg0)
}

// Set mocks base method
func (m *MockGeoDB) Set(arg0 *redis.GeoQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockGeoDBMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGeoDB)(nil).Set), arg0)
}

// SetIfExists mocks base method
func (m *MockGeoDB) SetIfExists(arg0 *redis.GeoQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIfExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIfExists indicates an expected call of SetIfExists
func (mr *MockGeoDBMockRecorder) SetIfExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfExists", reflect.TypeOf((*MockGeoDB)(nil).SetIfExists), arg0)
}
