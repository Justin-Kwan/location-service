// Code generated by MockGen. DO NOT EDIT.
// Source: location-service/internal/tracking (interfaces: OrderStorer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	internal "location-service/internal"
	reflect "reflect"
)

// MockOrderStorer is a mock of OrderStorer interface
type MockOrderStorer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorerMockRecorder
}

// MockOrderStorerMockRecorder is the mock recorder for MockOrderStorer
type MockOrderStorerMockRecorder struct {
	mock *MockOrderStorer
}

// NewMockOrderStorer creates a new mock instance
func NewMockOrderStorer(ctrl *gomock.Controller) *MockOrderStorer {
	mock := &MockOrderStorer{ctrl: ctrl}
	mock.recorder = &MockOrderStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderStorer) EXPECT() *MockOrderStorerMockRecorder {
	return m.recorder
}

// AddNewOrder mocks base method
func (m *MockOrderStorer) AddNewOrder(arg0 *internal.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewOrder indicates an expected call of AddNewOrder
func (mr *MockOrderStorerMockRecorder) AddNewOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrder", reflect.TypeOf((*MockOrderStorer)(nil).AddNewOrder), arg0)
}

// DeleteOrder mocks base method
func (m *MockOrderStorer) DeleteOrder(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder
func (mr *MockOrderStorerMockRecorder) DeleteOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderStorer)(nil).DeleteOrder), arg0)
}

// FindAllNearbyOrderIDs mocks base method
func (m *MockOrderStorer) FindAllNearbyOrderIDs(arg0 *internal.Location, arg1 float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNearbyOrderIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNearbyOrderIDs indicates an expected call of FindAllNearbyOrderIDs
func (mr *MockOrderStorerMockRecorder) FindAllNearbyOrderIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNearbyOrderIDs", reflect.TypeOf((*MockOrderStorer)(nil).FindAllNearbyOrderIDs), arg0, arg1)
}

// FindAllNearbyUnmatchedOrderIDs mocks base method
func (m *MockOrderStorer) FindAllNearbyUnmatchedOrderIDs(arg0 *internal.Location, arg1 float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNearbyUnmatchedOrderIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNearbyUnmatchedOrderIDs indicates an expected call of FindAllNearbyUnmatchedOrderIDs
func (mr *MockOrderStorerMockRecorder) FindAllNearbyUnmatchedOrderIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNearbyUnmatchedOrderIDs", reflect.TypeOf((*MockOrderStorer)(nil).FindAllNearbyUnmatchedOrderIDs), arg0, arg1)
}

// GetOrder mocks base method
func (m *MockOrderStorer) GetOrder(arg0 string) (*internal.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(*internal.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder
func (mr *MockOrderStorerMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderStorer)(nil).GetOrder), arg0)
}
