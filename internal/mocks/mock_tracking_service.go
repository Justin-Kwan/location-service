// Code generated by MockGen. DO NOT EDIT.
// Source: location-service/internal/transport (interfaces: TrackingService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	internal "location-service/internal"
	reflect "reflect"
)

// MockTrackingService is a mock of TrackingService interface
type MockTrackingService struct {
	ctrl     *gomock.Controller
	recorder *MockTrackingServiceMockRecorder
}

// MockTrackingServiceMockRecorder is the mock recorder for MockTrackingService
type MockTrackingServiceMockRecorder struct {
	mock *MockTrackingService
}

// NewMockTrackingService creates a new mock instance
func NewMockTrackingService(ctrl *gomock.Controller) *MockTrackingService {
	mock := &MockTrackingService{ctrl: ctrl}
	mock.recorder = &MockTrackingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrackingService) EXPECT() *MockTrackingServiceMockRecorder {
	return m.recorder
}

// AddNewOrder mocks base method
func (m *MockTrackingService) AddNewOrder(arg0 *internal.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewOrder indicates an expected call of AddNewOrder
func (mr *MockTrackingServiceMockRecorder) AddNewOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrder", reflect.TypeOf((*MockTrackingService)(nil).AddNewOrder), arg0)
}

// DeleteCourier mocks base method
func (m *MockTrackingService) DeleteCourier(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourier indicates an expected call of DeleteCourier
func (mr *MockTrackingServiceMockRecorder) DeleteCourier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourier", reflect.TypeOf((*MockTrackingService)(nil).DeleteCourier), arg0)
}

// DeleteOrder mocks base method
func (m *MockTrackingService) DeleteOrder(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder
func (mr *MockTrackingServiceMockRecorder) DeleteOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockTrackingService)(nil).DeleteOrder), arg0)
}

// FindAllNearbyOrderIDs mocks base method
func (m *MockTrackingService) FindAllNearbyOrderIDs(arg0 *internal.Location, arg1 float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllNearbyOrderIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllNearbyOrderIDs indicates an expected call of FindAllNearbyOrderIDs
func (mr *MockTrackingServiceMockRecorder) FindAllNearbyOrderIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllNearbyOrderIDs", reflect.TypeOf((*MockTrackingService)(nil).FindAllNearbyOrderIDs), arg0, arg1)
}

// GetAllNearbyCouriers mocks base method
func (m *MockTrackingService) GetAllNearbyCouriers(arg0 *internal.Location, arg1 float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNearbyCouriers", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNearbyCouriers indicates an expected call of GetAllNearbyCouriers
func (mr *MockTrackingServiceMockRecorder) GetAllNearbyCouriers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNearbyCouriers", reflect.TypeOf((*MockTrackingService)(nil).GetAllNearbyCouriers), arg0, arg1)
}

// TrackCourier mocks base method
func (m *MockTrackingService) TrackCourier(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackCourier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackCourier indicates an expected call of TrackCourier
func (mr *MockTrackingServiceMockRecorder) TrackCourier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackCourier", reflect.TypeOf((*MockTrackingService)(nil).TrackCourier), arg0)
}
